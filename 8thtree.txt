#include <stdio.h>
#include <stdlib.h>

#define INF 9999
#define MAX 20

int G[MAX][MAX], spanning[MAX][MAX], n;

int prims() {
    int cost[MAX][MAX], u, v, min_dist, dist[MAX], from[MAX], visited[MAX], edges, i, min_cost, j;

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            cost[i][j] = (G[i][j] == 0) ? INF : G[i][j];
            spanning[i][j] = 0;
        }

    dist[0] = 0;
    visited[0] = 1;
    for (i = 1; i < n; i++) {
        dist[i] = cost[0][i];
        from[i] = 0;
        visited[i] = 0;
    }

    min_cost = 0;
    edges = n - 1;

    while (edges > 0) {
        min_dist = INF;
        for (i = 1; i < n; i++)
            if (!visited[i] && dist[i] < min_dist) {
                v = i;
                min_dist = dist[i];
            }

        u = from[v];
        spanning[u][v] = spanning[v][u] = dist[v];
        edges--;
        visited[v] = 1;

        for (i = 1; i < n; i++)
            if (!visited[i] && cost[i][v] < dist[i]) {
                dist[i] = cost[i][v];
                from[i] = v;
            }
        min_cost += cost[u][v];
    }
    return min_cost;
}

int main() {
    int i, j, total_cost;

    printf("Vertices: ");
    scanf("%d", &n);

    printf("Adj Matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &G[i][j]);

    total_cost = prims();

    printf("\nSpanning Tree:\n");
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n; j++)
            printf("%d\t", spanning[i][j]);
    }

    printf("\nTotal cost: %d\n", total_cost);
    return 0;
}
